(doc pr-str)
(pr-str {:param "
map"})
(pr-str {:param "map"})
(str "<h1>Hello World</h1>" (pr-str {:param "map"}))
(doc with-out-str)
(require 'wnv-site.calculation :refer :all)
(require 'wnv-site.calculation :refer [create-kml])
(require '[wnv-site.calculation :refer :all])
(create-kml "Iowa" {"MEAN_elev" -2 "AveDrnCls" 2 "prec01_06" 3 "tmax01_06" 3})
(use 'wnv-site.calculation)
(create-kml "Iowa" {"MEAN_elev" -2 "AveDrnCls" 2 "tmax01_06" 3})
*e
(.printStackTrace *e)
(doc doc)
(require '[wnv-site.risk-calculation :refer :all])
(require '[wnv-site.calculation :refer :all)
(require '[wnv-site.calculation :refer :all])
(create-kml "Iowa" {"MEAN_elev" -2 "tmax01_06" 0})
(require '[incanter.stats :refer [quantile]])
(quantile '(1 0 0 0 2 0 0 0 5))
(quantile '(1 0 0 0 2 0 0 0 5) :probs [0.2 0.4 0.6 0.8 1.0])
(quantile '(1 0 0 0 2 0 0 0 15) :probs [0.2 0.4 0.6 0.8 1.0])
(def key-vals {:a 1 :b 2})
key-vals
(name (first (keys key-vals)))
(into {} [(name (first (keys key-vals))) (first (vals key-vals))])
[(name (first (keys key-vals))) (first (vals key-vals))]
{(name (first (keys key-vals))) (first (vals (key-vals)))}
(hash-map (name (first (keys-vals))) (first (vals key-vals)))
(hash-map (name (first (key-vals))) (first (vals key-vals)))
(assoc {} (-> key-vals keys first name) (first (vals key-vals)))
(hash-map (name (first (keys key-vals))) (first (vals key-vals)))
(doc get-scores)
(source get-scores)
(use 'wnv-site.risk-calculation)
(doc get-scores)
(get-scores (repeate 0 100))
(repeat 0 100)
(repeat 100 0)
(get-scores (repeat 100 0))
(def shapefile (clojure.java.io/file "/home/jeff/oct21/WNV_IndVariables.shp"))
(def features (query-features shapefile "State = 'Iowa'"))
(first features)
(def fields-weights {"MEAN_elev" 0 "IrrPerc" 0 "MEDAGE2000" 0 "MedIncome" 0 "AveDrnCls" 0 "All_Forest" 0 "All_Wetlan" 0 "prec01_06" 0 "tmax01_06" 0 "precPrYr" 0 "tmaxPrYr" 0})
(get-scores (get-attribute-list features "MEAN_elev"))
(get-scores (get-attribute-list features "MedIncome"))
(def new-fields (create-new-features (first features) (keys fields-weights) "_f"))
(def schema (create-schema shapefile (cons (list "Final" "Final" (class 1.0)) new-fields)))
new-fields
fields-weights
(use 'wnv-site.risk-calculation :reload-all)
(def new-fields (create-new-features (first features) (keys fields-weights) "_f"))
new-fields
fields-weights
(def new-fields (create-new-features (first features) (keys fields-weights) "_f"))
(use 'wnv-site.risk-calculation :reload-all)
(def new-fields (create-new-features (first features) (keys fields-weights) "_f"))
new-fields
(use 'wnv-site.risk-calculation :reload-all)
(def new-fields (create-new-features (first features) (keys fields-weights) "_f"))
new-fields
(use 'wnv-site.risk-calculation :reload-all)
(def new-fields (create-new-features (first features) (keys fields-weights) "_f"))
new-fields
(def schema (create-schema shapefile (cons (list "Final" "Final" (class 1.0)) new-fields)))
schema
(def outname "IowaCurrent.kml")
(def outfile (str "/home/jeff/wwwkml/" outname))
outfile
(def feature-collection (copy-features features schema))
(def new-features (iterator->list (.features feature-collection)))
(first new-features)
(def converter (convert-to-web-mercator schema "the_geom"))
(doseq [[field write _] new-fields] (do (score-attribute new-features field write) (weight-attribute new-features write write (fields-weights field))))
(get-attribute-list new-features "MEAN_elev")
(get-attribute-list new-features "MEAN_ele_f")
(doseq [[field write _] new-fields] (println field write (fields-weights field)))
(map (fn [[field write _]] (score-attribute new-features field write)) new-fields)
(get-attribute-list new-features "MEAN_ele_f")
(map (fn [[field write _]] (weight-attribute new-features write write (fields-weights field)) new-fields)
)
(map (fn [[field write _]] (weight-attribute new-features write write (fields-weights field))) new-fields)
(get-attribute-list new-features "MEAN_ele_f")
(total-score new-features (map second new-fields) "Final")
(get-attribute-list new-features "Final")
(score-attribute new-features "Final" "Final")
(doseq [feature new-features] (converter feature))
(to-kml outfile feature-collection)
(require '[incanter.stats :refer [quantile]])
(quantile [-2 0 0 0 0 0 0 0 0 0 0] :probs [0.2 0.4 0.6 0.8 1.0])
(def incoming [{"a" 1} {"b" 2} {"c" 3}])
(apply merge incoming)
(merge {"a" 1 "b" 2 "c" 3})
(apply merge {"a" 1 "b" 2 "c" 3})
(use 'wnv-site.calculation)
(rework-map {"a" "1" "b" "2"})
(def m {"a" "1" "b" "2"})
(update-in m ["a"] read-string)
(for [item (keys m)] (update-in m [item] read-string))
(for [[k v] m] (hash-map k (read-string v)))
(apply merge *1)
